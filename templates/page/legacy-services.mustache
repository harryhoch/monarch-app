{{{includes.navbar}}}

<div class="wrapperforfooter">
  <div class="container-fluid monarch-container">

    <div class="content content-bottom">
            <div class="title">Monarch Services (LEGACY)</div>
            <div class="section">
                <div class="sectiontitle">Overview</div>
                <div class="block">
                    <div class="text">
                    Note: these services will soon be retired. Please consult the <a href="services">services</a> page for up to date information.
                    </div>
                </div>

                <div class="block">
                    <div class="text">
                        There are currently three types of service calls:
                        <ul>
                            <li>Fetch a data object: fetch all information about a
                            particular entity (disease, phenotype, etc.)</li>
                            <li>Search: fetch matches based on specified search
                            criteria. Search may be:
                                <ul>
                                <li>Lexical - e.g. find all diseases for string "renal"</li>
                                <li>Logical - e.g. find all entities relevant for
                                "kidney" or its parts</li>
                                <li>Similarity-based - e.g. find all models that
                                have a close match to a set of phenotypes</li>
                                </ul>
                            </li>
							<li>Compute: perform a computation on a set of phenotypes
								against data loaded into the owlsim server.
							</li>
                        </ul>
                        Service calls are implemented via one or more calls to
                        other Monarch or external services.
                    </div>
                </div>
            </div>
            <div class="section">
                <div class="sectiontitle">Data Objects</div>
                <div class="block">
                    <div class="text">
                        A data object is a json object containing all information
                        about a particular entity. A data object may be
                        constructed via one or more calls to other services
                        (including OntoQuest, Federation and OwlSim).
                        <h3>Data Object URLs</h3>
                        The general schema for data objects is:
                        <pre>
                        $BASEURL/:datatype/:id.json
                        </pre>
                        For a sub-part of this object the general schema:
                        <pre>
                        $BASEURL/:datatype/:id/:section.json
                        </pre>
                        Each of these is implemented as a call
                        to the <a href="/docs/files/api-js.html">JS API</a>.
                        Note that each of these URLs corresponds to a page in the
                        UI. On any page in the Monarch system,
                        suffix <strong>.json</strong> onto the end of the URL to
                        retrieve data.
                        <h3>Datatypes</h3>
                        The current list of datatypes:
                        <ul>
                        <li><strong><a href="/disease">/disease/</a>:id</strong> - Executes a call
                        to <a href="/docs/files/api-js.html#bbop.monarch.Engine.fetchDiseaseInfo">fetchDiseaseInfo(:id)</a>.
                        <br/>Examples:
                        <ul>
                        <li><a href="/disease/OMIM_127750.json">/disease/OMIM_127750.json</a>
                        - Dementia, Lewy Body
                        </li>
                        </ul>
                        </li>
                        <li><strong><a href="/phenotype/">/phenotype/</a>:id</strong> - Executes a call
                        to <a href="/docs/files/api-js.html#bbop.monarch.Engine.fetchPhenotypeInfo">fetchPhenotypeInfo(:id)</a>
                        <br/>Examples:
                        <ul>
                        <li><a href="/phenotype/HP_0000003.json">/phenotype/HP_0000003.json</a>
                        - Multicystic kidney dysplasia
                        </li>
                        <li><a href="/phenotype/MP_0000854.json">/phenotype/MP_0000854.json</a>
                        - abnormal cerebellum development
                        </li>
                        </ul>
                        </li>
                        <li><strong><a href="/gene/">/gene/</a>:id</strong> - Executes a call
                        to <a href="/docs/files/api-js.html#bbop.monarch.Engine.fetchGeneInfo">fetchGeneInfo(:id)</a>
                        </li>
                        <li><strong><a href="/genotype/">/genotype/</a>:id</strong> - Executes a call
                        to <a href="/docs/files/api-js.html#bbop.monarch.Engine.fetchGenotypeInfo">fetchGenotypeInfo(:id)</a>
                        </li>
                        <li><strong><a href="/phenome/">/phenome/</a>:id.gff3</strong>
                        (UNSTABLE) returns a phenome in GFF3 format
                        <br/>Examples:
                        <ul>
                        <li><a href="/phenome/Homo_sapiens.gff3">/phenome/Homo_sapiens.gff3</a>
                        - currently only GFF3 supported
                        </li>
                        </ul>
                        </li>
                        </ul>
                        <h3>REST API Documentation</h3>                        
                        <p>
                          To see the full documentation, see:
                          <a href="/docs/files/web/webapp-js.html">Auto-generated documentation</a>
                        </p>
                        <h3>Data Object JSON specification</h3>
                        The specification for the JSON data objects returned is
                        still unstable. For details, please see the JS API. The
                        following principles are adhered to:
                        <ul>
                        <li><a href="http://json-ld.org">JSON-LD</a> is
                        used</li>
                        <li>Each object is uniquely identified by
                        an <strong>id:</strong> field. This maps to the IRI in
                        the JSON LD context</li>
                        <li>Each object should have a human-readable name
                        identified with a <strong>label:</strong> field. This maps
                        to rdfs:label in the JSON LD context</li>
                        <li>Each object should be typed using
                        a <strong>type:</strong> field. This maps
                        to rdf:type in the JSON LD context. Note that the type
                        may be specified as a human-readable string, with this
                        mapped to an IRI in the context object.</li>
                        <li>Nesting is preferred over flat structures</li>
                        </ul>
                        <h3>RDF/OWL services</h3>
                        Each data object can be returned as RDF by
                        switching <strong>.json</strong> for <strong>.rdf</strong>
                        (or <strong>.nt</strong>). The mapping from JSON to RDF is
                        specified entirely by
                        the <a href="http://json-ld.org">JSON-LD</a> context.
                    </div>
                </div>
            </div>
            <div class="section">
                <div class="sectiontitle">Search</div>
                <div class="block">
                    <div class="text">
                        <h3>Ontology Search</h3>
                        URLs are of the form
                        <pre>
                        /search/:term.json
                        </pre>
                        This wraps a call to OntoQuest - OQ XML is translated to a
                        standard JSON from: <a href="/docs/files/api-js.html#bbop.monarch.Engine.searchOverOntologies">searchOverOntologies(:term,:opts)</a>
                        <h3>Profile Search</h3>
                        <a href="http://owlsim.org">OwlSim</a> is used for
                        semantic matching.  Currently services are only supported for a subset of entities in the system - those with phenotypes.
						<h4>Search for Entities</h4>
                        Find all entities that instantiate a set of attributes
                        matching an input set of attributes. For example, find all
                        animal models matching a disease phenotype profile.
                        <pre>
                        /analyze/phenotypes.json?input_items=a1+a2+...+an
                        </pre>
                        For example: 
                        <pre>
                        /analyze/phenotypes.json?input_items=MP:0000788+MP:0000914
                        </pre>
                        This wraps a call
                        to <a href="http://owltools.googlecode.com/svn/trunk/docs/api/owltools/sim2/OwlSim.html#findMatches(java.util.Set,
                        java.lang.String)">findMatches(atts, target)</a> in OwlSim.
                    </div>
                </div>
            </div>
			<div class="section">
                <div class="sectiontitle">Compute</div>
                <div class="block">
                    <div class="text">
					<h3>Compare</h3>
						We use <a href="http://owlsim.org">OwlSim</a> for semantic matching when comparing two entities (such as genes, diseases, or genotypes) with sets of attributes (phenotypes).
                    URLs are of the form                        
						<pre>
                        /compare/:x/:y.json
                        </pre> 
						where x can be either an entity or a list of phenotypes
						and y can be a list of entities and/or sets of phenotypes.
						<p>
                        This wraps a call to <a href="http://owltools.googlecode.com/svn/trunk/docs/api/owltools/sim2/OwlSim.html#getGroupwiseSimilarity(org.semanticweb.owlapi.model.OWLNamedIndividual, org.semanticweb.owlapi.model.OWLNamedIndividual)">getGroupwiseSimilarity(x,y)</a> in OwlSim.
                        This works such that given a query id (such as a gene, genotype, disease), and one or more target identifiers, it will map
						each to it's respective phenotypes, and perform an OwlSim comparison of the query to each target.
						You are permitted to mix query and target types.  For example, your query can be a disease, and the target(s)
						be a list of gene(s), disease(s), phenotype(s), and/or genotype(s).
						You can indicate to union the phenotypes of either the query or the target with a plus "+".  Only one
						entity may be supplied for the query, whereas multiple target entities are allowed (delimited by a comma).
						</p>
						<p>For details on owlsim, see http://owlsim.org</p>

						Paths:
						<ul>
						<li>/compare/:id1/:id2</li>
						<li>/compare/:id1/:id2,id3,...idN </li>
						<li>/compare/:id1+:id2/:id3,:id4,...idN </li>
						<li>/compare/:id1/:id2+:id3,:id4,:id5+:id6,...,:idN </li>
						</ul>
						Examples:
						<ul>
							<li><i>query with a disease</i> <a href='/disease/OMIM:270400'>Smith-Lemli-Opitz syndrome</a> <i>and compare to</i> <a href="/gene/NCBIGene:5156">PDGFRA</a>, <a href="/disease/OMIM:249000">Meckel Syndrome</a>, and <a href="/disease/OMIM:194050">Williams-beuren Syndrome</a>: <br /><a href="/compare/OMIM:270400/NCBIGene:5156,OMIM:249000,OMIM:194050.json">/compare/OMIM:270400/NCBIGene:5156+OMIM:249000,OMIM:194050.json</a></li>
							<li><i>query with a phenotype profile</i> of <a href="/phenotype/HP:0000707">abnormality of the nervous system</a>, <a href="/phenotype/HP:0001045">Vitiligo</a>, <a href="/phenotype/HP:0006693">Myocardial steatosis</a> <i>and compare to</i> <a href="/gene/NCBIGene:5156">PDGFRA</a>, <a href="/disease/OMIM:612528">Diamond-blackfan Anemia 5</a> disease, <a href="/gene/NCBIGene:3257">HPS1</a>: <br /><a href="/compare/HP:0000707+HP:0001045+HP:0006693/NCBIGene:5156,OMIM:612528,NCBIGene:3257.json">/compare/HP:0000707+HP:0001045+HP:0006693/NCBIGene:5156,OMIM:612528,NCBIGene:3257.json</a></li>
							<li><i>query with a phenotype profile</i> of <a href="/phenotype/HP:0000206">Glossitis</a>, <a href="/phenotype/HP:0000709">Psychosis</a>, and <a href="/phenotype/HP:0000126">Hydronephrosis</a> <i>and compare to another phenotype profile of</i> <a href="/phenotype/HP:0001917">Renal amyloidosis</a>, <a href="/phenotype/HP:0000200">Short lingual frenulum</a>, and <a href="/phenotype/HP:0000722">obsessive-compulsive behavior</a>: <br /><a href="/compare/HP:0000206+HP:0000709+HP:0000126/HP:0001917,HP:0000722,HP:0000200.json">/compare/HP:0000206+HP:0000709+HP:0000126/HP:0001917+HP:000722+HP:0000200.json</a></li>
                        </ul>

					<h3>Profile Information</h3>
					<p>We use Information Content (IC)-based algorithms to compute similarity scores in the Monarch system.  
					You can retrieve the computed <a href="http://owltools.googlecode.com/svn/trunk/docs/api/owltools/sim2/OwlSim.html#getInformationContentForAttribute(org.semanticweb.owlapi.model.OWLClass)">IC scores</a> 
					for each ontology class, plus summary statistics
					for a phenotype profile and the overall system.  This will also compute an <strong>Annotation Sufficiency</strong> 
					score using a set of 20 pre-defined high-level phenotype classes.</p>
					URLs are of the form:
					<pre>
					/score?annotation_profile=<strong>:profile</strong>
					</pre>
					The profile needs to be supplied as a JSON object with the following minimal structure:
					<pre>
					{ features : [ {id : <strong>:id</strong>}, ...] }
					</pre>
					Where the ids are of phenotypes or other classes contained in our <a href="https://code.google.com/p/phenotype-ontologies/">Monarch ontology</a> import chain. Non-existent
					classes will be tossed from the calculation, and reported as unresolvable_classes.
					<p>You may supply "not" or "normal" annotations as part of the profile by adding an <strong>isPresent : false</strong> attribute to each object.  
					These are presently weighted equally to "abnormal" annotations when calculating the sufficiency score.</p>
					Here are a few examples of the annotation_profile JSON objects:
					<ul>
						<li><a href='/score/?annotation_profile={"id" : "MONARCH:Example1","features" : [{"id":"HP:0000505"},{"id":"HP:0000479"},{"id":"HP:0001010"},{"id":"HP:0000044"}]}'>
							Example 1:</a> A simple profile with four phenotypes.
<pre>     {"features" : [{"id":"HP:0000505"},{"id":"HP:0000479"},{"id":"HP:0001010"},{"id":"HP:0000044"}]}</pre></li>
						<li> <a href='/score/?annotation_profile={"id" : "MONARCH:Example2","features" : [{"id":"HP:0000505"},{"id":"HP:0000479"},{"id":"HP:0001010"},{"id":"HP:0000044"}]}'>
							Example 2:</a> You can supply an optional identifier for your own purposes, but it is ignored by our system<br /> 
<pre>
     {<strong>"id"       : "MONARCH:Example2"</strong>,
     "features"  : [{"id":"HP:0000505"},{"id":"HP:0000479"},{"id":"HP:0001010"},{"id":"HP:0000044"}]}</pre></li>
                       <li><a href='/score/?annotation_profile={"id" : "MONARCH:Example3","features" : [{"id":"HP:0000505","isPresent" : "true"},{"id":"HP:0000479", "isPresent" : "false"},{"id":"HP:0001010","isPresent" : "true"},{"id":"HP:0000044", "isPresent" : "false"}]}'>Example 3:</a> You can provide both normal and abnormal qualifiers<br/>
<pre>
     {"features" : [{"id":"HP:0000505",<strong>isPresent : true</strong>},{"id":"HP:0000479", <strong>isPresent : false</strong>},
                    {"id":"HP:0001010",<strong>isPresent : true</strong>},{"id":"HP:0000044", <strong>isPresent : false</strong>}]}
</pre></li>	
					   <li><a href='/score/?annotation_profile={"id":"MONARCH:Example4", "features" : [{"id":"HP:0001332"},{"id":"HP:0007319"},{"id":"HP:0002135"},{"id":"HP:0007238"},{"id":"HP:0004963"},{"id":"HP:0002077"},{"id":"HP:0004934"},{"id":"HP:0001681"},{"id":"HP:0000505","isPresent":"false"},{"id":"HP:0000481","isPresent":"false"},{"id":"HP:0000589","isPresent":"false"},{"id":"HP:0000593","isPresent":"false"},{"id":"HP:0000518","isPresent":"false"},{"id":"HP:0000479","isPresent":"false"},{"id":"HP:0000587","isPresent":"false"},{"id":"HP:0000568","isPresent":"false"},{"id":"HP:0000639","isPresent":"false"},{"id":"HP:0000486","isPresent":"false"},{"id":"HP:0008538","isPresent":"false"},{"id":"HP:0000367","isPresent":"false"},{"id":"HP:0004467","isPresent":"false"},{"id":"HP:0000384","isPresent":"false"},{"id":"HP:0000356","isPresent":"false"},{"id":"HP:0000359","isPresent":"false"},{"id":"HP:0000953","isPresent":"false"},{"id":"HP:0001010","isPresent":"false"},{"id":"HP:0005306","isPresent":"false"},{"id":"HP:0011276","isPresent":"false"},{"id":"HP:0002652","isPresent":"false"},{"id":"HP:0002659","isPresent":"false"},{"id":"HP:0009816","isPresent":"false"},{"id":"HP:0009824","isPresent":"false"},{"id":"HP:0100490","isPresent":"false"},{"id":"HP:0001836","isPresent":"false"},{"id":"HP:0006101","isPresent":"false"},{"id":"HP:0001770","isPresent":"false"},{"id":"HP:0100258","isPresent":"false"},{"id":"HP:0100259","isPresent":"false"},{"id":"HP:0001180","isPresent":"false"},{"id":"HP:0001849","isPresent":"false"},{"id":"HP:0002650","isPresent":"false"},{"id":"HP:0000925","isPresent":"false"},{"id":"HP:0001371","isPresent":"false"},{"id":"HP:0001762","isPresent":"false"},{"id":"HP:0001263","isPresent":"false"},{"id":"HP:0010862","isPresent":"false"},{"id":"HP:0002194","isPresent":"false"},{"id":"HP:0000750","isPresent":"false"},{"id":"HP:0001328","isPresent":"false"},{"id":"HP:0007018","isPresent":"false"},{"id":"HP:0000717","isPresent":"false"},{"id":"HP:0000708","isPresent":"false"},{"id":"HP:0001290","isPresent":"false"},{"id":"HP:0001250","isPresent":"false"},{"id":"HP:0001251","isPresent":"false"},{"id":"HP:0002072","isPresent":"false"},{"id":"HP:0001257","isPresent":"false"},{"id":"HP:0010301","isPresent":"false"},{"id":"HP:0005310","isPresent":"false"},{"id":"HP:0001677","isPresent":"false"},{"id":"HP:0012455","isPresent":"false"}]}'>Example 4:</a> An annotation profile with few "abnormal" annotations, but many "normal/not"<br />

						</li>
					</ul>
					There are three scores provided, each with a range of (0..1):  
					<ul>
						<li><strong>simple</strong>: A simple measure of amount of information 
							in the profile, with an emphasis on number and depth of annotations.</li>
						<li><strong>categorical</strong>: A score computed similar to the 
							simple score, Annotations are first split into high-level 
							phenotypic categories, a sub-score is computed for each subset/category 
							(similar to the simple score above), which are finally averaged together.</li>
						<li><strong>scaled</strong>: A combined score with weights applied to the 
							simple and categorical scores. <i>This is the score displayed in the Monarch web interface.</i></li>
					</ul>
					<p>Summary statistics for the profile, the system, and for each category are provided for you if you choose to compute your own profile scores.</p>
					</div>
				</div>	
			</div>
            <div class="section">
                <div class="sectiontitle">Implementation</div>
                <div class="block">
                    <div class="text">
                        See webapp.js in the source.
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>


<!-- Footer. -->
{{{includes.footer}}}
